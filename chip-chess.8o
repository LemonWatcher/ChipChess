: pieces

: empty 0 0 0 0

: white-pawn
	0b00000000
	0b00011000
	0b00010000
	0b00000000
	
: white-knight
	0b00000000
	0b00011100
	0b00111000
	0b00000000
	
: white-bishop
	0b00000000
	0b00110100
	0b00111100
	0b00000000
	
: white-rook
	0b00000000
	0b00100100
	0b00111100
	0b00000000

: white-queen
	0b00000000
	0b00011000
	0b01111110
	0b00000000
	
: white-king
	0b00000000
	0b01011010
	0b01111110
	0b00000000
	
: skip 0 0 0 0 0 0 0 0 # Waste 8 bytes so we can use lower 4 bits as offset

: black-pawn
	0b11111111
	0b11100111
	0b11101111
	0b11111111

: black-knight
	0b11111111
	0b11100011
	0b11000111
	0b11111111

: black-bishop
	0b11111111
	0b11001011
	0b11000011
	0b11111111

: black-rook
	0b11111111
	0b11011011
	0b11000011
	0b11111111

: black-queen
	0b11111111
	0b11100111
	0b10000001
	0b11111111

: black-king
	0b11111111
	0b10100101
	0b10000001
	0b11111111

# Piece representation
:const EMPTY     0          # Blank square
:const PAWN      0b00000001 # Low 3 bits have piece info
:const KNIGHT    0b00000010
:const BISHOP    0b00000011
:const ROOK      0b00000100
:const QUEEN     0b00000101
:const KING      0b00000110 # Note the 2 byte gap here which affects sprite offsets

:const BLACK     0b00001000 # Bits 4/5 for colours
:const WHITE     0b00010000

:const UP        0b00100000 # Bits 6/7 for direction of pawns
:const DOWN      0b01000000

:const UNMOVED   0b10000000 # Bit 8 for unmoved flag for castling 

:const OFF_BOARD 0b11111111 # Used for off-board squares in move checking

: position
	:byte { BLACK | UNMOVED | ROOK }
	:byte { BLACK | UNMOVED | KNIGHT }
	:byte { BLACK | UNMOVED | BISHOP }
	:byte { BLACK | UNMOVED | QUEEN }
	:byte { BLACK | UNMOVED | KING }
	:byte { BLACK | UNMOVED | BISHOP }
	:byte { BLACK | UNMOVED | KNIGHT }
	:byte { BLACK | UNMOVED | ROOK }
	
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	
	:byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY }
	:byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY }
	:byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY }
	:byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY }
	
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	
	:byte { WHITE | UNMOVED | ROOK }
	:byte { WHITE | UNMOVED | KNIGHT }
	:byte { WHITE | UNMOVED | BISHOP }
	:byte { WHITE | UNMOVED | QUEEN }
	:byte { WHITE | UNMOVED | KING }
	:byte { WHITE | UNMOVED | BISHOP }
	:byte { WHITE | UNMOVED | KNIGHT }
	:byte { WHITE | UNMOVED | ROOK }

:alias rank ve # IN
:alias file vd # IN
:alias square v0 # IN
:alias mask vc
:alias piece vb
:alias x va
:alias y v9
# CLOBBERS square, mask, x, y, i

: draw-square
	mask := 0b1111
	square &= mask
	square <<= square
	square <<= square

	i := pieces
	i += square

	x <<= file
	x <<= x
	x <<= x
	
	y <<= rank
	y <<= y
	
	sprite x y 4
;

#:alias rank ve
#:alias file vd
#:alias square v0
#:alias mask vc
#:alias piece vb
#:alias x va
#:alias y v9
:alias offset v8
# CLOBBERS rank, file, offset, square, i

: draw-board
	rank := 0
	loop
		while rank != 8
		file := 0
		loop
			while file != 8
			
			offset <<= rank
			offset <<= offset
			offset <<= offset
			offset += file
			i := position
			i += offset
			load square
			draw-square # rank file square
			
			file += 1
		again
		rank += 1
	again
;

: main
	draw-board
