: pieces

: empty 0 0 0 0

: white-pawn
	0b00000000
	0b00011000
	0b00010000
	0b00000000
	
: white-knight
	0b00000000
	0b00011100
	0b00111000
	0b00000000
	
: white-king
	0b00000000
	0b01011010
	0b01111110
	0b00000000
	
: white-bishop
	0b00000000
	0b00110100
	0b00111100
	0b00000000
	
: white-rook
	0b00000000
	0b00100100
	0b00111100
	0b00000000

: white-queen
	0b00000000
	0b00011000
	0b01111110
	0b00000000
	
# There is a 2x4 byte gap in the lower 4 bits of pieces, so fill it
: cursor 255 255 255 255

: skip 0 0 0 0 

: black-pawn
	0b11111111
	0b11100111
	0b11101111
	0b11111111

: black-knight
	0b11111111
	0b11100011
	0b11000111
	0b11111111

: black-king
	0b11111111
	0b10100101
	0b10000001
	0b11111111

: black-bishop
	0b11111111
	0b11001011
	0b11000011
	0b11111111

: black-rook
	0b11111111
	0b11011011
	0b11000011
	0b11111111

: black-queen
	0b11111111
	0b11100111
	0b10000001
	0b11111111

# Piece representation
:const EMPTY     0          # Blank square
:const PAWN      0b00000001 # Low 3 bits have piece info
:const KNIGHT    0b00000010
:const KING      0b00000011
:const BISHOP    0b00000100 # Keep sliders together
:const ROOK      0b00000101
:const QUEEN     0b00000110 # Note the 2 byte gap here which affects sprite offsets

:const BLACK     0b00001000 # Bits 4/5 for colours
:const WHITE     0b00010000

:const UP        0b00100000 # Bits 6/7 for direction of pawns
:const DOWN      0b01000000

:const UNMOVED   0b10000000 # Bit 8 for unmoved flag for castling 

# Board representation

:const OFF_BOARD 0b11111111 # Used as a sentinel for off-board squares in move checking

# Offset table for the 8x8 board inside the 10x12 board with sentinal squares around it
: mailbox
	21 22 23 24 25 26 27 28
	31 32 33 34 35 36 37 38
	41 42 43 44 45 46 47 48
	51 52 53 54 55 56 57 58
	61 62 63 64 65 66 67 68
	71 72 73 74 75 76 77 78
	81 82 83 84 85 86 87 88
	91 92 93 94 95 96 97 98

: position
	:byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD }
	:byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD }

	:byte { OFF_BOARD }
	:byte { BLACK | UNMOVED | ROOK }
	:byte { BLACK | UNMOVED | KNIGHT }
	:byte { BLACK | UNMOVED | BISHOP }
	:byte { BLACK | UNMOVED | QUEEN }
	:byte { BLACK | UNMOVED | KING }
	:byte { BLACK | UNMOVED | BISHOP }
	:byte { BLACK | UNMOVED | KNIGHT }
	:byte { BLACK | UNMOVED | ROOK }
	:byte { OFF_BOARD }
	
	:byte { OFF_BOARD }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { BLACK | UNMOVED | DOWN | PAWN }
	:byte { OFF_BOARD }
	
	:byte { OFF_BOARD } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { OFF_BOARD }
	:byte { OFF_BOARD } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { OFF_BOARD }
	:byte { OFF_BOARD } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { OFF_BOARD }
	:byte { OFF_BOARD } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { EMPTY } :byte { OFF_BOARD }
	
	:byte { OFF_BOARD }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { WHITE | UNMOVED | UP | PAWN }
	:byte { OFF_BOARD }
	
	:byte { OFF_BOARD }
	:byte { WHITE | UNMOVED | ROOK }
	:byte { WHITE | UNMOVED | KNIGHT }
	:byte { WHITE | UNMOVED | BISHOP }
	:byte { WHITE | UNMOVED | QUEEN }
	:byte { WHITE | UNMOVED | KING }
	:byte { WHITE | UNMOVED | BISHOP }
	:byte { WHITE | UNMOVED | KNIGHT }
	:byte { WHITE | UNMOVED | ROOK }
	:byte { OFF_BOARD }
	
	:byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD }
	:byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD } :byte { OFF_BOARD }


:alias offset ve # IN
:alias square v0 # IN
:alias mask vd
:alias x vc
:alias y vb
# CLOBBERS square, mask, x, y, i

: draw-square
	mask := 0b1111
	square &= mask
	square <<= square
	square <<= square

	i := pieces
	i += square
	
	mask := 0b111
	x := offset
	x &= mask
	x <<= x
	x <<= x
	x <<= x

	mask := 0b11111000
	y := offset
	y &= mask
	y >>= y
	
	sprite x y 4
;

#:alias offset ve
#:alias square v0
# CLOBBERS offset, square, i

: draw-board
	offset := 0
	loop
		while offset != 64
		
		i := mailbox
		i += offset
		load square
		
		i := position
		i += square
		load square
			
		draw-square # offset square
			
		offset += 1
	again
;

: main
	draw-board
